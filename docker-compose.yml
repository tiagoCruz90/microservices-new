version: '3'
services:
##Postgres Docker Compose Configuration
    postgres-order:
        container_name: postgres-order
        image: postgres:latest
        environment:
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres
         POSTGRES_DB: order-service
         PGDATA: data/postgres
        ports:
        - "5431:5431"
        expose:
        - "5431"
        command: -p 5431
        volumes:
        - ./postgres:/var/lib/postgresql/data
        restart: always

    postgres-inventory:
        container_name: postgres-inventory
        image: postgres:latest
        environment:
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres
         POSTGRES_DB: inventory-service
         PGDATA: data/postgres
        ports:
        - "5432:5432"
        volumes:
        - ./postgres:/var/lib/postgresql/data
        restart: always

## MongoDB Docker Compose Configuration
    mongo:
      container_name: mongo
      image: mongo:latest
      restart: always
      ports:
        - "27017:27017"
      expose:
        - "27017"
      volumes:
        - ./mongodb:/data/db

## Keycloak Docker Compose Configuration
    keycloak-mysql:
      container_name: keycloak-mysql
      image: mysql:latest
      volumes:
        - ./mysql_keycloak_data:/var/lib/mysql
      environment:
        MYSQL_DATABASE: keycloak
        MYSQL_USER: keycloak
        MYSQL_PASSWORD: password
        MYSQL_ROOT_PASSWORD: root

    keycloak:
      container_name: keycloak
      image: quay.io/keycloak/keycloak:latest
      command: [ "start-dev", "--import-realm" ]
      environment:
        DB_VENDOR: MYSQL
        DB_ADDR: mysql
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_PASSWORD: password
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
      ports:
        - "8080:8080"
      volumes:
        - ./realms/:/opt/keycloak/data/import/
      depends_on:
      - keycloak-mysql

## Zookeeper and Kafka Configuration
    zookeeper:
      image: confluentinc/cp-zookeeper:latest
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

    broker:
      image: confluentinc/cp-kafka:latest
      container_name: broker
      ports:
        - "9092:9092"
      depends_on:
        - zookeeper
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

## Zipkin
    zipkin:
      image: openzipkin/zipkin
      container_name: zipkin
      ports:
      - "9411:9411"

## Discovery Server
    discovery-server:
      image: tcruz25/discovery-server:latest
      container_name: discovery-server
      pull_policy: always
      ports:
        - "8761:8761"
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        - zipkin


## API Gateway
    api-gateway:
      image: tcruz25/api-gateway:latest
      container_name: api-gateway
      pull_policy: always
      ports:
        - "8181:8080"
      expose:
        - "8181"
      environment:
        - SPRING_PROFILES_ACTIVE=docker
        - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
      depends_on:
        - discovery-server
        - zipkin
        - keycloak

## Product Service
    product-service:
      image: tcruz25/product:latest
      container_name: product-service
      pull_policy: always
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
      - discovery-server
      - api-gateway
      - mongo

## Order Service
    order-service:
      image: tcruz25/order:latest
      container_name: order-service
      pull_policy: always
      environment:
        - SPRING_PROFILES_ACTIVE=docker
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
      depends_on:
      - discovery-server
      - api-gateway
      - postgres-order
      - broker
      - zipkin

## Inventory Service
    inventory-service:
      image: tcruz25/inventory:latest
      container_name: inventory-service
      pull_policy: always
      environment:
        - SPRING_PROFILES_ACTIVE=docker
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
      depends_on:
      - discovery-server
      - api-gateway
      - postgres-inventory

## Notification Service
    notification-service:
      image: tcruz25/notification-service:latest
      container_name: notification-service
      pull_policy: always
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
      - discovery-server
      - api-gateway
      - broker
      - zipkin

  ## Prometheus and Grafana
    prometheus:
      image: prom/prometheus:latest
      container_name: prometheus
      restart: unless-stopped
      ports:
       - "9090:9090"
      volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      depends_on:
        - order-service
        - product-service
        - inventory-service
        - notification-service

    grafana:
      image: grafana/grafana-oss:latest
      container_name: grafana
      ports:
        - "3000:3000"
      restart: unless-stopped
      volumes:
        - ./grafana:/var/lib/grafana
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=password


