spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3307/order
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

server.port=8081
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience4j properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

#Resilience4j timeout properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4j retry properties
resilience4j.retry.instances.inventory.max-attempts=3
#wait for 5 seconds before retrying
resilience4j.retry.instances.inventory.wait-duration=5s

#spring.zipkin.base-url=http://localhost:9411
management.tracing.sampling.probability=1.0

# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},${traceId:order-trace},${spanId:order-span}]

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans



# Kafka properties
spring.kafka.bootstrap-servers=localhost: 9092
spring.kafka.template.default-topic=notificationTopic
#used to serialize the key object into bytes while sending the data to kafka from producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#used to serialize the value object into bytes while sending the data to kafka from producer in json format
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.tutorial.order.event.OrderPlacedEvent
