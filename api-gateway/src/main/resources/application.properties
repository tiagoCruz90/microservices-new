eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=api-gateway

logging.level.root=INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO
# responsible for loading the routes from the configuration
logging.level.org.springframework.clour.gateway=TRACE

##Product-service route
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

##Order-service route
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order

##Discovery-server route
spring.cloud.gateway.routes[2].id=discovery-server
spring.cloud.gateway.routes[2].uri=http://localhost:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[2].filters[0]=SetPath=/

##Discovery-server Static Resources route
spring.cloud.gateway.routes[3].id=discovery-server-static
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

##Keycloak route
#keycloak realm url, this way the gateway can validate the token, the springboot will work behinnd the scenes by reading the openid-configuration from the keycloak realm
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8087/realms/spring-boot-microservices-realm

#spring.zipkin.base-url=http://localhost:9411
management.tracing.sampling.probability=1.0

# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},${traceId:api-gateway-trace},${spanId:api-gateway-span}]

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans